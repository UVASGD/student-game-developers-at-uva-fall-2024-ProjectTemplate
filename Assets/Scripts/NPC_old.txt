using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using TMPro;
using Unity.VisualScripting;
using UnityEngine;

public class NPC : MonoBehaviour{

    private GameObject player;
    private Player playerScript;
    private bool curDisplay = false;
    private bool dialogueMode = false;

    [SerializeField] private SpriteRenderer spriteRenderer;
    [SerializeField] private TextMeshPro textMeshPro;
    private string[] dialogueSplit;
    private int dialogueIndex = 0;
    private int curDialogue;

    [SerializeField] private string[] dialogue;
    [SerializeField] private string[] reqsToConv;
    [SerializeField] private bool[] hasFlag;
    [SerializeField] private bool[] read;
    private Player.flags[][] reqs;

    void Start()
    {
        player = GameObject.Find("Player");
        playerScript = player.GetComponent<Player>();
        //spriteRenderer = GameObject.Find("Background").GetComponent<SpriteRenderer>();
        //textMeshPro = GameObject.Find("Text").GetComponent<TextMeshPro>();
        spriteRenderer.size = new Vector2(0, 0);

        string[] tempStr;
        reqs = new Player.flags[reqsToConv.Length][];
        for (int i=0; i < reqsToConv.Length; i++)
        {
            tempStr = reqsToConv[i].Split(',');
            reqs[i] = new Player.flags[tempStr.Length];
            for(int j=0; j < tempStr.Length; j++)
            {
                if (!Enum.TryParse<Player.flags>(tempStr[j], out reqs[i][j]))
                {
                    reqs[i][j] = 0;
                    Debug.Log("Error in parsing " + tempStr[j] + " for reqs " + reqsToConv[i]);
                }

            }
        }
    }

    void Update()
    {
        double dist = Mathf.Sqrt(Mathf.Pow(player.transform.position.x - transform.position.x, 2) + Mathf.Pow(player.transform.position.z - transform.position.z, 2));
        double height = Mathf.Abs(player.transform.position.y - transform.position.y);
        if (dist <= 70 && height <= 20 && !curDisplay && !dialogueMode)
        {
            curDisplay = true;
            textUpdate(dialogueCheck());
        }
        else if ((dist > 70 || height > 20) && curDisplay)
        {
            curDisplay = false;
            textUpdate("");
        }

        if (Input.GetButtonDown("E"))
        {
            if (curDisplay)
            {
                dialogueMode = true;
                playerScript.moveLock = true;
                curDisplay = false;
            }
            
            if (dialogueMode)
            {
                displayDialogue();
            }
        }
    }

    string dialogueCheck()
    {
        bool toRead = false;
        for (int i = 1; i < dialogue.Length; i++)
        {
            toRead = true;
            if (!read[i])
            {
                int len = reqs[i].Length;
                if (hasFlag[i])
                {
                    len--;
                }
                for (int j = 0; j < len; j++)
                {
                    if (!playerScript.dialogueFlags.Contains(reqs[i][j]))
                    {
                        toRead = false;
                    }
                }
            }
            else
            {
                toRead = false;
            }

            if (toRead)
            {
                dialogueSplit = dialogue[i].Split('|');
                curDialogue = i;
                break;
            }
        }

        if (!toRead)
        {
            dialogueSplit = dialogue[0].Split('|');
            curDialogue = 0;
            return "?";
        }
        else
        {
            return "!";
        }
    }
    
    void textUpdate(string str)
    {
        textMeshPro.SetText(str);
        Vector2 textSize;
        if (str.Equals(""))
        {
            textSize = new Vector2(0, 0);
        }
        else
        {
            textMeshPro.ForceMeshUpdate();
            textSize = textMeshPro.GetRenderedValues(true) + new Vector2(6f, 4f);
        }
        spriteRenderer.size = textSize;
    }

    void displayDialogue()
    {
        if(dialogueIndex < dialogueSplit.Length)
        {
            textUpdate(dialogueSplit[dialogueIndex]);
            dialogueIndex++;
        }
        else
        {
            textUpdate("");
            read[curDialogue] = true;
            if (hasFlag[curDialogue])
            {
                playerScript.dialogueFlags.Add(reqs[curDialogue].Last());
            }
            dialogueIndex = 0;
            dialogueMode = false;
            playerScript.moveLock = false;
        }
    }
}
